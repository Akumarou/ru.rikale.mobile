@page "/"
@using static ru.rikale.mobile.Components.Layout.MainLayout
@inject IJSRuntime JS

<div class="content">
    <h1 class="hide header" id="header">Напоминалки</h1>
    <button id="button" class="button hide" @onclick="showAlert">Гиде мордашка?</button>
    <button id="button1" class="button hide" @onclick="showLoader">Тыкни лоадер</button>
</div>

@code {
    private static List<string> replicas { get; set; } = new List<string>();
    private static void FillReplicas()
    {
        replicas = new List<string>
        {
            "Даже холодный расчет может привести к победе.",
            "Я могу показаться жестокой, но я на вашей стороне.",
            "Иногда для достижения мира нужны суровые меры.",
            "Мы победим, несмотря на страх и сомнения.",
            "Эмоции могут быть слабостью, я выбрала силу разума.",
            "Решительность — ключ к успеху.",
            "Не бойтесь меня, бойтесь тех, кто хочет вас уничтожить.",
            "Моя холодность — это щит для вашей защиты.",
            "Сложные решения делают нас сильнее.",
            "Я готова идти на всё, чтобы защитить этот мир.",
            "Наша цель оправдывает любые средства.",
            "Я не ищу одобрения, я стремлюсь к результату.",
            "Вы можете не любить мои методы, но они работают.",
            "Страх — это только временное препятствие на пути к победе.",
            "Мои расчёты никогда не подводят.",
            "Мы победим, потому что я не знаю поражений.",
            "Каждое решение приближает нас к свободе.",
            "Моя холодность — это ваша надежда на выживание.",
            "Мы сильнее, когда действуем без сомнений."
        };
    }

    public void showAlert()
    {
        if (replicas == null || replicas.Count == 0)
            FillReplicas();
        string currentRepl = replicas[(new Random()).Next(replicas.Count)];
        replicas.Remove(currentRepl);
        AppRenderer.ShowAlertAsync(currentRepl, 7000);
    }
    public void showLoader()
    {
        AppRenderer.ShowLoader(3000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
            MainThread.BeginInvokeOnMainThread(async () => await JS.InvokeVoidAsync("slowAppear"));
    }
}

<script>
    function slowAppear() {
        window.setTimeout(function () { document.getElementById('header').classList.add('show'); }, 500);
        window.setTimeout(function () { document.getElementById('button').classList.add('show'); }, 750);
        window.setTimeout(function () { document.getElementById('button1').classList.add('show'); }, 1000);
    }
</script>