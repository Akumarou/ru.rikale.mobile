@inherits LayoutComponentBase
@inject IJSRuntime JS


<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">

<div class="loader" id="loader">
    <img class="loader-image" src="images/Loader.gif" />
</div>

<NavMenu />

<div class="page">
    @Body
</div>

<div class="toolTip" id="toolTipImg">
    <div class="toolTipText" id="toolTipText"></div>
    <img class="toolTipImg" id="toolTipImgSrc" src="images/ToolTipLogo_1.gif" />
</div>


@code {
    private static bool isHidingTooltip { get; set; }
    private static bool isShowingTooltip { get; set; }
    private static bool isShowingLoader { get; set; }
    private static bool isOpeningTooltip { get; set; }
    private static bool isSetClosingAlertTimer { get; set; }
    private static System.Timers.Timer TimeoutClosingAlertTimer { get; set; }
    private static System.Timers.Timer TimeoutClosingLoaderTimer { get; set; }
    private static System.Timers.Timer OpeningAlertTimer { get; set; }
    private static System.Timers.Timer ClosingAlertTimer { get; set; }
    private static System.Timers.Timer ClosingLoaderTimer { get; set; }
    private static Thread CloseAlert { get; set; }
    private static Thread ClosingAlert { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        AppRenderer.SetRenderer(this);
        if (firstRender)
            AppRenderer.ShowAlertAsync("Приветствую тебя, Хозяин!<br />С возвращением!", 4500, 1);
    }

    public static class AppRenderer
    {
        private static MainLayout? Renderer { get; set; }

        public static void SetRenderer(MainLayout renderer) { if (renderer != null) Renderer = renderer; }

        public static void ShowAlertAsync(string message, int timeout = 0, int imageId = 0)
        {
            Renderer?.ShowAlertAsync(message, timeout, imageId > 0 ? imageId : (new Random()).Next(1, 4));
        }

        public static void ShowLoader(int timeout = 0)
        {
            Renderer?.ShowLoader(timeout);
        }

        public static void HideAlertAsync()
        {
            Renderer?.HideAlertAsync();
        }
    }

    private static void SetTimer(System.Timers.Timer timer, int timeout, Action action)
    {
        timer = new System.Timers.Timer(timeout);
        timer.Elapsed += (s, e) =>
        {
            action.Invoke();
            DisposeTimer(timer);
        };
        timer.Enabled = true;
        timer.Start();
    }

    private static void DisposeTimer(System.Timers.Timer timer)
    {
        try
        {
            timer.Stop();
            timer.Dispose();
            timer.Close();
        }
        catch (Exception)
        {
            Console.WriteLine();
        }
    }

    public async Task ShowLoader(int timeout)
    {
        if (isShowingLoader) return;
        App.NeedToBlockBackButton = true;
        isShowingLoader = true;
        await JS.InvokeVoidAsync("showLoader");
        if (timeout > 500)
            SetTimer(TimeoutClosingLoaderTimer, timeout, async () => { await HideLoader(); });
    }

    public async Task HideLoader()
    {
        if (!isShowingLoader) return;
        await JS.InvokeVoidAsync("hideLoader");
        SetTimer(ClosingLoaderTimer, 500, async () =>
        {
            App.NeedToBlockBackButton = false;
            await JS.InvokeVoidAsync("closeLoader");
            isShowingLoader = false;
        });
    }

    public async Task ShowAlertAsync(string message, int timeout, int imageId)
    {
        if (isShowingTooltip || isOpeningTooltip)
            return;
        isShowingTooltip = isOpeningTooltip = true;
        if (timeout > 700)
        {
            isSetClosingAlertTimer = true;
            SetTimer(TimeoutClosingAlertTimer, timeout, HideAlert);
        }
        await JS.InvokeVoidAsync("showTooltip", message, imageId);
        SetTimer(OpeningAlertTimer, 700, () => { isOpeningTooltip = false; });
    }

    public async Task HideAlertAsync()
    {
        if (isHidingTooltip || isOpeningTooltip || !isShowingTooltip)
            return;
        isHidingTooltip = true;
        if (isSetClosingAlertTimer)
        {
            isSetClosingAlertTimer = false;
            DisposeTimer(TimeoutClosingAlertTimer);
        }
        await JS.InvokeVoidAsync("hideTooltip");
        SetTimer(ClosingAlertTimer, 700, () => { isHidingTooltip = isShowingTooltip = false; });
    }

    [JSInvokable]
    public static void HideAlert()
    {
        MainThread.BeginInvokeOnMainThread(AppRenderer.HideAlertAsync);
    }
}

<script>
    function showLoader() {
        document.getElementById('app').classList.add('app_loader');
        document.getElementById('loader').classList.add('loader-visible');
        window.setTimeout(function () { document.getElementById('loader').classList.add('loader-visible__animation'); }, 10);
    }

    function hideLoader() {
        document.getElementById('loader').classList.remove('loader-visible__animation');
    }

    function closeLoader() {
        document.getElementById('loader').classList.remove('loader-visible');
        document.getElementById('app').classList.remove('app_loader');
    }

    function showTooltip(message, imageId) {
        document.getElementById('toolTipImgSrc').src = "images/ToolTipLogo_" + imageId + ".gif";
        document.getElementById('toolTipImg').style.left = '0';
        document.getElementById('toolTipText').innerHTML = message;
        document.getElementById('toolTipText').style.display = message && message != '' ? 'block' : 'none';
    }

    function hideTooltip() {
        document.getElementById('toolTipImg').style.left = '-120%';
        document.getElementById('toolTipText').innerHTML = '';
        document.getElementById('toolTipText').style.display = 'none';
    }

    document.getElementById('toolTipImgSrc').addEventListener('click', function () { DotNet.invokeMethodAsync('ru.rikale.mobile', 'HideAlert'); });
</script>